#!/Library/Frameworks/Python.framework/Versions/3.9/bin/python3
# COMP3311 21T3 Ass2 ... print list of rules for a program or stream

import sys
import psycopg2
import re
from helpers import getAogDefby, getDegreeName, getOrgunitsProgram, getOrgunitsStream, getProgram, getProgramDetails, getProgramRulesType, getRulesType, getStream, getCourseName, getStreamDetails, getStreamRulesType, minOrMax, minOrMaxFree

# define any local helper functions here
# ...

### set up some globals

usage = f"Usage: {sys.argv[0]} (ProgramCode|StreamCode)"
db = None

### process command-line args

argc = len(sys.argv)
if argc < 2:
  print(usage)
  exit(1)
code = sys.argv[1]
if len(code) == 4:
  codeOf = "program"
elif len(code) == 6:
  codeOf = "stream"

try:
  db = psycopg2.connect("dbname=mymyunsw")
  if codeOf == "program":
    progInfo = getProgram(db,code)
    if not progInfo:
      print(f"Invalid program code {code}")
      exit()
    # print(progInfo)  #debug
    # List the rules for Program
    # ... add your code here ...
    # print(progInfo)

    # First 3 lines
    print(f"{progInfo[0]} {progInfo[2]}, {progInfo[3]} UOC, {progInfo[3]/48} years")
    faculty = getOrgunitsProgram(db, progInfo[0])
    print(f"- offered by {faculty[0]}")
    print("Academic Requirements:")

    pg_detail = getProgramDetails(db, progInfo[0])
    for i in range(len(pg_detail)):
      name = pg_detail[i][0]
      code = getRulesType(db, name)[0]
      # '''
      # DS 
      # AO Group       - enumerated list of stream codes 
      #               - # streams to complete
      # '''
      if code == 'DS':
        # Comp Sci Majors
        stream_num = pg_detail[i][-1]
        print(f"{stream_num} stream(s) from {pg_detail[i][0]}")
        stream_list = pg_detail[i][1].split(",")
        for stream in stream_list:
          degree = getDegreeName(db, stream)
          if degree:
            print(f"- {stream} {degree[0]}")
          else:
            print(f"- {stream} ???")
      
      # '''
      # CC 
      # AO Group       - list of course codes (no patterns)
      # Min/Max        - not needed
      # '''
      elif code == 'CC':
        # Foundational Computing
        # Industry Training
        course_list = pg_detail[i][1].split(",")
        if len(course_list) == 1:
          print(pg_detail[i][0])
          print(f"- {pg_detail[i][1]} {pg_detail[i][2]}")
        elif len(pg_detail[i][1]) > 1:
          print(f"all courses from {pg_detail[i][0]}")
          for course_code in course_list:
            course_name = getCourseName(db, course_code)
            if course_name:
              print(f"- {course_code} {course_name[0]}")
            else:
              m = re.findall('[a-zA-Z1-9]+', course_code)
              course_1, course_2 = m
              course_name_1 = getCourseName(db, course_1)
              course_name_2 = getCourseName(db, course_2)
              print(f"- {course_1} {course_name_1[0]}")
              print(f"  or {course_2} {course_name_2[0]}")

      # '''
      # GE
      # AO Group       - any course like GEN##### **
      # Min/Max        - typically min = max = 12
      # '''    
      elif code == 'GE':
        # General Education
        print(f"{pg_detail[i][-1]} UOC of {pg_detail[i][0]}")


    '''
    WM
    AO Group       - requires minimum WAM; typically used as a pre-req; not used in this assignment
    Min/Max        - min is minimum WAM
    '''
    '''
    RQ, LR, MR 
    AO Group       - not used in this assignment
    Min/Max        - -
    '''

  elif codeOf == "stream":
    strmInfo = getStream(db,code)
    if not strmInfo:
      print(f"Invalid stream code {code}")
      exit()
    #debug
    # List the rules for Stream
    # ... add your code here ...
    # print(strmInfo)
    # print(getOrgunitsStream(db, strmInfo[0]))

    '''
    DS 
    AO Group       - enumerated list of stream codes 
                   - # streams to complete
    '''
    '''
    CC 
    AO Group       - list of course codes (no patterns)
    Min/Max        - not needed
    '''
    '''
    PE
    AO Group       - list of courses (enumerated or patterns)
    Min/Max        - must complete UOC between min and max;
                     (max = null) means "at least min UOC";
                     min = null) means "up to max UOC"; cannot both be null
    '''
    '''
    FE
    AO Group       - don't need an AO group, but could have one with FREE#### as the pattern
    Min/Max        - as for PE
    '''
    '''
    GE
    AO Group       - any course like GEN##### **
    Min/Max        - typically min = max = 12
    '''
    '''
    WM
    AO Group       - requires minimum WAM; typically used as a pre-req; not used in this assignment
    Min/Max        - min is minimum WAM
    '''
    '''
    RQ, LR, MR 
    AO Group       - not used in this assignment
    Min/Max        - -
    '''
    # First 3 lines
    print(f"{strmInfo[1]} {strmInfo[2]}")
    faculty = getOrgunitsStream(db, strmInfo[0])
    print(f"- offered by {faculty[0]}")
    print("Academic Requirements:")

    strm_detail = getStreamDetails(db, strmInfo[0])
    for i in range(len(strm_detail)):
      name = strm_detail[i][0]
      code = getRulesType(db, name)[0]
      gdefby = getAogDefby(db, name)[0]
      # print(code)
      # '''
      # CC 
      # AO Group       - list of course codes (no patterns)
      # Min/Max        - not needed
      # '''
      if code == 'CC':
        course_list = strm_detail[i][1].split(",")
        if len(course_list) == 1 and re.match('\{.*\;.*\}', strm_detail[i][1]):
          print(strm_detail[i][0])
          for course_code in course_list:
            course_name = getCourseName(db, course_code)
            if course_name:
              print(f"- {course_code} {course_name[0]}")
            else:
              m = re.findall('[a-zA-Z1-9]+', course_code)
              course_1, course_2 = m
              course_name_1 = getCourseName(db, course_1)
              course_name_2 = getCourseName(db, course_2)
              print(f"- {course_1} {course_name_1[0]}")
              print(f"  or {course_2} {course_name_2[0]}")
        elif len(strm_detail[i][1]) > 1:
          print(f"all courses from {strm_detail[i][0]}")
          for course_code in course_list:
            course_name = getCourseName(db, course_code)
            if course_name:
              print(f"- {course_code} {course_name[0]}")
            else:
              m = re.findall('[a-zA-Z1-9]+', course_code)
              course_1, course_2 = m
              course_name_1 = getCourseName(db, course_1)
              course_name_2 = getCourseName(db, course_2)
              print(f"- {course_1} {course_name_1[0]}")
              print(f"  or {course_2} {course_name_2[0]}")
      
      # '''
      # PE
      # AO Group       - list of courses (enumerated or patterns)
      # Min/Max        - must complete UOC between min and max;
      #                 (max = null) means "at least min UOC";
      #                 min = null) means "up to max UOC"; cannot both be null
      # '''
      if code == 'PE' and gdefby == 'enumerated':
        minOrMax(strm_detail[i][-2], strm_detail[i][-1], strm_detail[i][0])

        stream_list = strm_detail[i][1].split(",")
        for stream in stream_list:
          course = getCourseName(db, stream)
          if course:
            print(f"- {stream} {course[0]}")
          else:
            print(f"- {stream} ???")

      elif code == 'PE' and gdefby == 'pattern':
        minOrMax(strm_detail[i][-2], strm_detail[i][-1], strm_detail[i][0])
        print(f"- courses matching {strm_detail[i][1]}")

      # '''
      # FE
      # AO Group       - don't need an AO group, but could have one with FREE#### as the pattern
      # Min/Max        - as for PE
      # '''
      if code == 'FE':
        minOrMaxFree(strm_detail[i][-2], strm_detail[i][-1], 'Free Electives')

except Exception as err:
  print(err)
finally:
  if db:
    db.close()
